1)	Checking Nmap Version:
Command: nmap –version

2)	Scanning a Network Range (192.100.1.1/24):
Command: nmap 192.100.1.1/24
	 Performs a network scan on all devices within the given subnet.

3)	Scanning a Network Range (172.16.0.1/24):
Command: nmap 172.16.0.1/24
	 Scans all live hosts within the given network range.

4)	Scanning a Single Host:
Command: nmap scanme.nmap.org
	Scans a single target (scanme.nmap.org) to check for open ports and services.

5)	Detecting Service Versions:
nmap -sV scanme.nmap.org

6)	Performing an Aggressive Scan:
Command: nmap -A scanme.nmap.org
Performs OS detection, version detection, script scanning, and traceroute for deeper analysis

7)	UDP port scan :
Command: nmap 192.168.1.1 -sU 

8)	TCP Window port scan:
Command: nmap 192.168.1.1 -sW

9)	No Scan. List targets only:
nmap 192.168.1.1-3 -sL

Performing a Stealth Scan In Zenmap :
Command: nmap 172.16.1.*






Wireshark steps to follow:
	Start Packet Capture: Click on the capture button to start monitoring network traffic in real- time. 
	Apply Filters: Use display filters to isolate specific packets, such as HTTP traffic (http), TCP packets (tcp), or specific IP addresses (ip.addr == 192.168.1.1). 
	Analyze Traffic: Inspect captured packets for anomalies, unknown sources, or unauthorized communications. 
	Export and Save Data: Wireshark allows exporting captured data for further analysis in security tools.







opened the .html HTTP-Wireshark File in the browser & providing username and password for sign in 
successfully signed in 
captured HTTP protocol packets by filtering
Displays the raw hexadecimal and ASCII representation of the packet data 






Here’s a step-by-step breakdown of how to perform each of the tasks using **Nmap** as a junior network security analyst:

---

### ✅ 1. **Ping Scan to Detect Live Hosts**
```bash
nmap -sn 192.168.1.0/24
```
- This performs a ping scan on the **192.168.1.0/24** subnet to identify **live hosts** without scanning any ports.

---

### ✅ 2. **TCP Port Scan to List All Open Ports**
```bash
nmap -sT 192.168.1.X
```
- Replace `192.168.1.X` with the target IP address.
- This performs a **TCP Connect scan** to list open ports.

---

### ✅ 3. **Service and Version Detection on Ports 22, 80, and 443**
```bash
nmap -sV -p 22,80,443 192.168.1.X
```
- `-sV` enables **version detection**.
- `-p` specifies specific ports to scan.

---

### ✅ 4. **Operating System Detection**
```bash
nmap -O 192.168.1.X
```
- `-O` enables **OS detection**.

---   

### ✅ 5. **Scan an External Website to List Open Ports and Services**
```bash
nmap -sV example.com
```
- Replace `example.com` with the external domain or IP.
- This reveals open ports and service versions.

---192.168.230.1

### ✅ 6. **Scan High-Numbered Ports (8000–9000)**
```bash
nmap -p 8000-9000 192.168.1.X
```
- Focuses only on ports **8000 to 9000**.

---

### ✅ 7. **Detect Firewall (Open, Closed, Filtered)**
```bash
nmap -sS -v 192.168.1.X
```
- `-sS` is a **TCP SYN (stealth) scan**, useful for detecting firewall behavior.
- `-v` enables **verbose output** to help identify filtered vs open ports.

---

### ✅ 8. **Scan Host That Ignores Ping Requests**
```bash
nmap -Pn 192.168.1.15
```
- `-Pn` disables host discovery (ping), treating the host as **always online**.

---

### ✅ 9. **Stealth Scan (Avoid IDS Detection)**
```bash
nmap -sS 192.168.1.X
```
- `-sS` performs a **half-open SYN scan**, less likely to trigger IDS.

---

### ✅ 10. **Scan for Remote Access Services (SSH/Telnet)**
```bash
nmap -p 22,23 192.168.1.X
```
- Scans only **SSH (22)** and **Telnet (23)** to check for remote access vulnerabilities.

---

Let me know if you'd like a script or a report template for this scan!

192.168.51.78
